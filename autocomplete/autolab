#!/bin/bash

# Thank you to Steve Kemp for the starter code I found at
# https://debian-administration.org/article/317/An_introduction_to_bash_completion_part_2
# It's not every day you find such a simple and elegant solution
# to a problem that is rarely encountered.

get_opts() {
    if [[ $1 = *"status "* ]]; then
        # Special case for the "status" subcommand
        echo ""
        return 1
    elif [[ $1 = *"submit "* ]]; then
        # Special case for "submit" subcommand

        # Submit subcommands take the following form:
        #   autolab submit [<course_name:assessment_name>] <filename> [OPTIONS]
        num_words=$(echo "${1}" | wc -w)

        if [[ ${num_words} = 2 ]]; then
          # Current command is:
          # autolab submit
          # We need to recommend a course
          autolab courses -q -u | cut -d' ' -f5
          return 0
        elif [[ ${num_words} = 3 ]]; then
          # Current command is either:
          # autolab submit <course_name>
          # or:
          # autolab submit <course_name>:<asmt_name>
          # We need to recommend either a course or an assessment

          # Case 1:
          # autolab submit <course_name>:<asmt_name>
          if [[ $1 = *":"* ]]; then
              # Case 1(a):
              # We need to recommend a filename
              if [[ $1 = *" " ]]; then
                ls
                return 0
              # Case 1(b):
              # We need to recommend an assessment
              else
                autolab asmts $(echo "${1}" | awk 'NF{print $NF}' | cut -d: -f1) -q -u | cut -d' ' -f5
                return 1
              fi
          # Case 2:
          # autolab submit <course_name>
          else
              autolab courses -q -u | cut -d' ' -f5
              return 1
          fi
        elif [[ ${num_words} = 4 ]]; then
          # Current command is:
          # autolab submit <course_name>:<asmt_name> <filename>
          # We need to recommend a filename or an option, depending on whether
          # there is a trailing space
          if [[ $1 = *" " ]]; then
            echo "--help --force --wait"
            return 0
          # Case 1(b):
          # We need to recommend an assessment
          else
            ls
            return 0
          fi
          return 0
        else
          # Current command is:
          # autolab submit <course_name>:<asmt_name> <filename> [OPTIONS]
          # We need to recommend an option
          echo "-h --force --wait"
          return 0
        fi
    elif [[ $1 = *"courses "* ]]; then
        # Special case for "courses" subcommand
        echo ""
        return 0
    elif [[ $1 = *"assessments "* ]] || [[ $1 = *"asmts "* ]]; then
        # Special case for "assessments/asmts" subcommand

        # The asmts subcommand takes the following form:
        # autolab assessments <course_name> [OPTIONS]

        # Let's not autocomplete [OPTIONS] for now

        autolab courses -q -u | cut -d' ' -f5
        return 0
    elif [[ $1 = *"scores "* ]] || [[ $1 = *"submissions "* ]] || [[ $1 = *"problems "* ]] || [[ $1 = *"feedback "* ]] || [[ $1 = *"download "* ]]; then
        # Special case for "scores" subcommand

        # The scores subcommand takes the following form:
        # autolab scores [<course_name:assessment_name>] [OPTIONS]
        num_words=$(echo "${1}" | wc -w)

        touch $HOME/flag.txt

        if [[ ${num_words} = 2 ]]; then
          # Current command is:
          # autolab <x>
          # We need to recommend a course
          autolab courses -q -u | cut -d' ' -f5
          return 0
        elif [[ ${num_words} = 3 ]] && ! [[ $1 = *" " ]]; then
          # Current command is either:
          # autolab submit <course_name>
          # or:
          # autolab submit <course_name>:<asmt_name>
          # We need to recommend either a course or an assessment

          # Case 1:
          # autolab submit <course_name>:<asmt_name>
          if [[ $1 = *":"* ]]; then
              # Case 1(a):
              # We need to recommend a filename
              if [[ $1 = *" " ]]; then
                ls
                return 0
              # Case 1(b):
              # We need to recommend an assessment
              else
                autolab asmts $(echo "${1}" | awk 'NF{print $NF}' | cut -d: -f1) -q -u | cut -d' ' -f5
                return 1
              fi
          # Case 2:
          # autolab submit <course_name>
          else
              autolab courses -q -u | cut -d' ' -f5 | awk '{print $1":"}'
              return 0
          fi
        else
          # Current command is:
          # autolab submit <course_name>:<asmt_name> <filename> [OPTIONS]
          # We need to recommend an option
          echo ""
          return 0
        fi
    elif [[ $1 = *"enroll"* ]]; then
        # Special case for "enroll" subcommand

        # The enroll command takes the following form:
        # autolab enroll [<action>] <course_name>
        num_words=$(echo "${1}" | wc -w)

        if [[ ${num_words} = 2 ]]; then
          # Current command is:
          # autolab enroll
          # We need to recommend an action
          echo "new edit drop"
          return 0
        elif [[ ${num_words} = 3 ]]; then
          # Current command is:
          # autolab submit <action>
          # We need to recommend an action or a course
          if [[ $1 = *" " ]]; then
              # Recommend a course
              autolab courses -q -u | cut -d' ' -f5
              return 0
          else
              echo "new edit drop"
              return 0
          fi

          return 0
        elif [[ ${num_words} = 4 ]] && ! [[ $1 = *" " ]]; then
          # Current command is:
          # autolab submit <action> <course_name>
          # We need to recommend a course
          autolab courses -q -u | cut -d' ' -f5
          return 0
        else
          echo ""
          return 0
        fi
    elif [[ $1 = *"autolab"* ]]; then
        echo "status download submit courses assessments asmts problems scores submissions feedback enroll"
        return 1
    else
        echo ""
        return 0
    fi
}

_autolab()
{
    local cur_line cur prev opts
    COMPREPLY=()
    cur_line="${COMP_LINE}"
    cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ ${cur} = ":" ]]; then
        cur=""
    fi
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=$(get_opts "${cur_line}" "${cur}" )

    #echo ""
    #echo ${opts}
    #echo ${cur}

    if [[ $? = 1 ]]; then
        COMPREPLY=( $(compgen -W "${opts}" "${cur}") )
    else
        COMPREPLY=( $(compgen -W "${opts}" "${cur}") ); compopt -o nospace
    fi
    return 0
}
complete -F _autolab autolab
